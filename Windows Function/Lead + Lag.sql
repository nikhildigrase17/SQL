USE DEMODATABASE;

CREATE TABLE PRODUCT
(
PRODUCT_ID INT,
SALE_DATE VARCHAR(20),
DAILY_SALES FLOAT
);

INSERT INTO PRODUCT VALUES
(1000,'2000-09-28',48850.40),
(1000,'2000-09-29',54500),
(1000,'2000-09-30',36000.07),
(1000,'2000-10-01',40200.43),
(2000,'2000-09-28',41888.88),
(2000,'2000-09-29',48000),
(2000,'2000-09-30',49850.03),
(2000,'2000-10-01',54850.29),
(3000,'2000-09-28',61301.77),
(3000,'2000-09-29',34509.13),
(3000,'2000-09-30',43868.86),
(3000,'2000-10-01',28000);

SELECT * FROM PRODUCT;

SELECT *,
LEAD(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS ONE,
LEAD(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS TWO,
LEAD(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THREE
FROM PRODUCT;

SELECT *,
LEAD(DAILY_SALES,-1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS ONE,
LEAD(DAILY_SALES,-2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS TWO,
LEAD(DAILY_SALES,-3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THREE
FROM PRODUCT; -- MYSQL DONT TAKE NEGATIVE NUMBER

SELECT *,
LEAD(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS SECOND_DAY_SALE,
LEAD(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THIRD_DAY_SALE,
ROUND((NEXT_DAY_SALE - DAILY_SALES)/DAILY_SALES * 100,2) AS SALE_CHANGE_NEXT_DAY,
ROUND((SECOND_DAY_SALE - NEXT_DAY_SALE)/NEXT_DAY_SALE * 100,2) AS SALE_CHANGE_SECOND_DAY,
ROUND((THIRD_DAY_SALE - SECOND_DAY_SALE)/SECOND_DAY_SALE * 100,2) AS SALE_CHANGE_THIRD_DAY
FROM PRODUCT;  -- TO WORK THIS CODE WE HAVE TO GIVE ALL CODE HERE, ALIAS NOT WORK IN MYSQL

-- ------------------------------------------------------------------------------------------------------------------------

-- LAG FUNCTION

SELECT *,
LAG(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS PREV_DAY_SALE,
LAG(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS PREV_TO_PREV_DAY_SALE,
LAG(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS BEFORE_TWO_DAY_SALE,
ROUND((PREV_DAY_SALE - DAILY_SALES)/PREV_DAY_SALE * 100,2) AS SALE_CHANGE_PREV_DAY,
ROUND((PREV_TO_PREV_DAY_SALE - PREV_DAY_SALE)/PREV_DAY_SALE * 100,2) AS SALE_CHANGE_PREV_TO_PREV_DAY,
ROUND((BEFORE_TWO_DAY_SALE - PREV_TO_PREV_DAY_SALE)/PREV_TO_PREV_DAY_SALE * 100,2) AS SALE_CHANGE_BEFORE_TWO_DAY
FROM PRODUCT; -- ALIAS DOESNT WORK HERE/ QUALIFY NOT WORK IN MYSQL
