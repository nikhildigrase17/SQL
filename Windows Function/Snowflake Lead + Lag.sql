USE DEMODATABASE;

CREATE OR REPLACE TABLE PRODUCT
(
PRODUCT_ID INT,
SALE_DATE VARCHAR(20),
DAILY_SALES FLOAT
);

INSERT INTO PRODUCT VALUES
(1000,'2000-09-28',48850.40),
(1000,'2000-09-29',54500),
(1000,'2000-09-30',36000.07),
(1000,'2000-10-01',40200.43),
(2000,'2000-09-28',41888.88),
(2000,'2000-09-29',48000),
(2000,'2000-09-30',49850.03),
(2000,'2000-10-01',54850.29),
(3000,'2000-09-28',61301.77),
(3000,'2000-09-29',34509.13),
(3000,'2000-09-30',43868.86),
(3000,'2000-10-01',28000);

SELECT * FROM PRODUCT;

SELECT *,
LEAD(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS ONE,
LEAD(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS TWO,
LEAD(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THREE
FROM PRODUCT;

SELECT *,
LEAD(DAILY_SALES,-1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS ONE,
LEAD(DAILY_SALES,-2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS TWO,
LEAD(DAILY_SALES,-3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THREE
FROM PRODUCT;

SELECT *,
LEAD(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS SECOND_DAY_SALE,
LEAD(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THIRD_DAY_SALE,
ROUND((NEXT_DAY_SALE - DAILY_SALES)/DAILY_SALES * 100,2) AS SALE_CHANGE_NEXT_DAY,
ROUND((SECOND_DAY_SALE - NEXT_DAY_SALE)/NEXT_DAY_SALE * 100,2) AS SALE_CHANGE_SECOND_DAY,
ROUND((THIRD_DAY_SALE - SECOND_DAY_SALE)/SECOND_DAY_SALE * 100,2) AS SALE_CHANGE_THIRD_DAY
FROM PRODUCT;

SELECT *,
LEAD(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS SECOND_DAY_SALE,
LEAD(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THIRD_DAY_SALE,
ROUND((NEXT_DAY_SALE - DAILY_SALES)/DAILY_SALES * 100,2) AS SALE_CHANGE_NEXT_DAY,
ROUND((SECOND_DAY_SALE - NEXT_DAY_SALE)/NEXT_DAY_SALE * 100,2) AS SALE_CHANGE_SECOND_DAY,
ROUND((THIRD_DAY_SALE - SECOND_DAY_SALE)/SECOND_DAY_SALE * 100,2) AS SALE_CHANGE_THIRD_DAY
FROM PRODUCT
WHERE SALE_DATE < '2000-10-02';

-- IF WE ONLY WANT TO SHOW PERCENTAGE TABLES

SELECT PRODUCT_ID,SALE_DATE,DAILY_SALES,SALE_CHANGE_NEXT_DAY,SALE_CHANGE_SECOND_DAY,SALE_CHANGE_THIRD_DAY
FROM
(SELECT *,
LEAD(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS SECOND_DAY_SALE,
LEAD(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THIRD_DAY_SALE,
ROUND((NEXT_DAY_SALE - DAILY_SALES)/DAILY_SALES * 100,2) AS SALE_CHANGE_NEXT_DAY,
ROUND((SECOND_DAY_SALE - NEXT_DAY_SALE)/NEXT_DAY_SALE * 100,2) AS SALE_CHANGE_SECOND_DAY,
ROUND((THIRD_DAY_SALE - SECOND_DAY_SALE)/SECOND_DAY_SALE * 100,2) AS SALE_CHANGE_THIRD_DAY
FROM PRODUCT);

-- QUALIFY STATEMENT (TO FILTER OUT THE DATA)

SELECT *,
LEAD(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS SECOND_DAY_SALE,
LEAD(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS THIRD_DAY_SALE,
ROUND((NEXT_DAY_SALE - DAILY_SALES)/DAILY_SALES * 100,2) AS SALE_CHANGE_NEXT_DAY,
ROUND((SECOND_DAY_SALE - NEXT_DAY_SALE)/NEXT_DAY_SALE * 100,2) AS SALE_CHANGE_SECOND_DAY,
ROUND((THIRD_DAY_SALE - SECOND_DAY_SALE)/SECOND_DAY_SALE * 100,2) AS SALE_CHANGE_THIRD_DAY
FROM PRODUCT
QUALIFY THIRD_DAY_SALE IS NOT NULL;


CREATE OR REPLACE TABLE sales(emp_id INTEGER, year INTEGER, revenue DECIMAL(10,2));
INSERT INTO sales VALUES (0, 2010, 1000), (0, 2011, 1500), (0, 2012, 500), (0, 2013, 750);
INSERT INTO sales VALUES (1, 2010, 10000), (1, 2011, 12500), (1, 2012, 15000), (1, 2013, 20000);
INSERT INTO sales VALUES (2, 2012, 500), (2, 2013, 800);

SELECT emp_id, 
year,
revenue, 
LEAD(revenue) 
OVER (PARTITION BY emp_id ORDER BY year) - revenue AS diff_to_next 
FROM sales 
ORDER BY emp_id, year;

-- IGNORE NULLS

CREATE OR REPLACE TABLE test (c1 NUMBER, c2 NUMBER);
INSERT INTO test VALUES (1,5),(2,4),(3,NULL),(4,2),(5,NULL),(6,NULL),(7,6);

SELECT c1, c2, 
LEAD(c2) OVER (ORDER BY c1) as c2_with_nulls,
LEAD(c2) IGNORE NULLS OVER (ORDER BY c1) As c2_without_nulls FROM test; -- to ignore the null values


---------------------------------------------------------------------------------------------------------------------------

-- LAG FUNCTIONS

SELECT *,
LAG(DAILY_SALES,1) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS PREV_DAY_SALE,
LAG(DAILY_SALES,2) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS PREV_TO_PREV_DAY_SALE,
LAG(DAILY_SALES,3) OVER(PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS BEFORE_TWO_DAY_SALE,
ROUND((PREV_DAY_SALE - DAILY_SALES)/PREV_DAY_SALE * 100,2) AS SALE_CHANGE_PREV_DAY,
ROUND((PREV_TO_PREV_DAY_SALE - PREV_DAY_SALE)/PREV_DAY_SALE * 100,2) AS SALE_CHANGE_PREV_TO_PREV_DAY,
ROUND((BEFORE_TWO_DAY_SALE - PREV_TO_PREV_DAY_SALE)/PREV_TO_PREV_DAY_SALE * 100,2) AS SALE_CHANGE_BEFORE_TWO_DAY
FROM PRODUCT
QUALIFY BEFORE_TWO_DAY_SALE IS NOT NULL;

-------------------------------------------------------------------------------------------------------------------------------

-- FIRST VALUE

SELECT
        column1,
        column2,
        FIRST_VALUE(column2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first
    FROM VALUES
       (1, 10), (1, 11), (1, null), (1, 12),
       (2, 20), (2, 21), (2, 22)
    ORDER BY column1, column2;

-- LAST VALUE

SELECT
        column1,
        column2,
        FIRST_VALUE(column2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first
    FROM VALUES
       (1, 10), (1, 11), (1, null), (1, 12),
       (2, 20), (2, 21), (2, 22)
    ORDER BY column1, column2;

SELECT
        column1,
        column2,
        FIRST_VALUE(column2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first,
        FIRST_VALUE(column2) IGNORE NULLS OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first_ignore_nulls,
        LAST_VALUE(column2) OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first,
        LAST_VALUE(column2) IGNORE NULLS OVER (PARTITION BY column1 ORDER BY column2 NULLS LAST) AS column2_first_ignore_nulls,
    FROM VALUES
       (1, 10), (1, 11), (1, null), (1, 12),
       (2, 20), (2, 21), (2, 22)
    ORDER BY column1, column2;

--------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TABLE example_cumulative (p INT, o INT, i INT);

INSERT INTO example_cumulative VALUES
    (  0, 1, 10), (0, 2, 20), (0, 3, 30),
    (100, 1, 10),(100, 2, 30),(100, 2, 5),(100, 3, 11),(100, 3, 120),
    (200, 1, 10000),(200, 1, 200),(200, 1, 808080),(200, 2, 33333),(200, 3, null), (200, 3, 4),
    (300, 1, null), (300, 1, null);

SELECT
    p, o, i,
    COUNT(i) OVER (PARTITION BY p ORDER BY o) count_i_Rows_Pre,
    SUM(i)   OVER (PARTITION BY p ORDER BY o) sum_i_Rows_Pre,
    AVG(i)   OVER (PARTITION BY p ORDER BY o) avg_i_Rows_Pre,
    MIN(i)   OVER (PARTITION BY p ORDER BY o) min_i_Rows_Pre,
    MAX(i)   OVER (PARTITION BY p ORDER BY o) max_i_Rows_Pre
  FROM example_cumulative
  ORDER BY p,o;

SELECT
    p, o, i,
    COUNT(i) OVER (PARTITION BY p ORDER BY o ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) count_i_Rows_Pre,
    SUM(i)   OVER (PARTITION BY p ORDER BY o ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) sum_i_Rows_Pre,
    AVG(i)   OVER (PARTITION BY p ORDER BY o ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) avg_i_Rows_Pre,
    MIN(i)   OVER (PARTITION BY p ORDER BY o ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) min_i_Rows_Pre,
    MAX(i)   OVER (PARTITION BY p ORDER BY o ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) max_i_Rows_Pre
  FROM example_cumulative
  ORDER BY p,o;

SELECT
    p, o, i,
    COUNT(i) OVER (PARTITION BY p ORDER BY o RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) count_i_Range_Pre,
    SUM(i)   OVER (PARTITION BY p ORDER BY o RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) sum_i_Range_Pre,
    AVG(i)   OVER (PARTITION BY p ORDER BY o RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) avg_i_Range_Pre,
    MIN(i)   OVER (PARTITION BY p ORDER BY o RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) min_i_Range_Pre,
    MAX(i)   OVER (PARTITION BY p ORDER BY o RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) max_i_Range_Pre
  FROM example_cumulative
  ORDER BY p,o;

-------------------------------------------------------------------------------------------------------------------------------------------

-- NTH VALUE

SELECT
    column1,
    column2,
    NTH_VALUE(column2, 2) OVER (PARTITION BY column1 ORDER BY column2) AS column2_2nd,
    NTH_VALUE(column2, 3) OVER (PARTITION BY column1 ORDER BY column2) AS column2_3rd
FROM VALUES
    (1, 10), (1, 11), (1, 12),
    (2, 20), (2, 21), (2, 22);



  -- https://docs.snowflake.com/en/sql-reference/functions-analytic#label-window-frames