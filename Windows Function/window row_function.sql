CREATE DATABASE ND_WINDOW_FUNCTIONS;
USE ND_WINDOW_FUNCTIONS;

CREATE TABLE ND_EMPLOYEE_RAW
(
EMPLOYEE_ID INT,
NAME VARCHAR(20),
SALARY FLOAT(2)
);

INSERT INTO ND_EMPLOYEE_RAW VALUES
(100,'NIKHIL',90000),
(100,'NIKHIL',90000),
(101,'MICHAEL',70000),
(101,'MICHAEL',70000),
(102,'PAT',60000),
(102,'PAT',60000);

SELECT * FROM ND_EMPLOYEE_RAW;

-- ORDER BY IS NOT MANDATORY UNLIKE SNOWFLAKE IN MYSQL
SELECT *, ROW_NUMBER() OVER() FROM ND_EMPLOYEE_RAW; 

SELECT *, ROW_NUMBER() 
OVER(ORDER BY SALARY) AS R_NUMBER_ASC FROM ND_EMPLOYEE_RAW;  -- ASC ORDER

SELECT *, ROW_NUMBER() 
OVER(ORDER BY SALARY DESC) AS R_NUMBER_DESC FROM ND_EMPLOYEE_RAW;  -- DESC ORDER

DELETE FROM (SELECT *, ROW_NUMBER() 
OVER(ORDER BY SALARY DESC) AS R_NUMBER_DESC FROM ND_EMPLOYEE_RAW)
WHERE R_NUMBER_DESC IN (2,5,7); -- WRONG CODE

-- WE CAN DO THIS USING CTE
WITH RankedEmployees AS (
    SELECT *, ROW_NUMBER() OVER (ORDER BY SALARY DESC) AS R_NUMBER_DESC 
    FROM ND_EMPLOYEE_RAW
)
DELETE FROM RankedEmployees
WHERE R_NUMBER_DESC IN (2, 5, 7);

SELECT NAME, SALARY
FROM ND_EMPLOYEE_RAW
ORDER BY SALARY DESC
LIMIT 3,1;

SELECT *, ROW_NUMBER()
OVER(PARTITION BY NAME ORDER BY MAX(SALARY) DESC) AS TOP_SALARY
FROM ND_EMPLOYEE_RAW
WHERE TOP_SALARY <= 3;  -- WRONG

-- WE CAN USE THIS BY USING CTE
WITH RankedEmployees AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY NAME ORDER BY SALARY DESC) AS TOP_SALARY
    FROM ND_EMPLOYEE_RAW
)
SELECT *
FROM RankedEmployees
WHERE TOP_SALARY <= 1;
